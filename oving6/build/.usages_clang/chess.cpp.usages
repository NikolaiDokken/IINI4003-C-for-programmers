22 serialization::archive 18 0 0 0 0 59 /Users/Nikolai/Documents/programmering/5semester/cpp/oving6 65 /Users/Nikolai/Documents/programmering/5semester/cpp/oving6/build 0 0 1133 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 1 < 1 10 1 11 18446744073709551615 8 iostream 1 11 1 19 18446744073709551615 1 > 1 19 1 20 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 6 memory 2 11 2 17 18446744073709551615 1 > 2 17 2 18 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 6 stdlib 3 11 3 17 18446744073709551615 1 . 3 17 3 18 18446744073709551615 1 h 3 18 3 19 18446744073709551615 1 > 3 19 3 20 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 6 string 4 11 4 17 18446744073709551615 1 > 4 17 4 18 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 6 vector 5 11 5 17 18446744073709551615 1 > 5 17 5 18 18446744073709551615 5 using 7 1 7 6 18446744073709551615 9 namespace 7 7 7 16 18446744073709551615 3 std 7 17 7 20 0 1 ; 7 20 7 21 18446744073709551615 5 class 9 1 9 6 18446744073709551615 10 ChessBoard 9 7 9 17 1 1 { 9 18 9 19 18446744073709551615 6 public 10 1 10 7 18446744073709551615 1 : 10 7 10 8 18446744073709551615 4 enum 11 3 11 7 18446744073709551615 5 class 11 8 11 13 18446744073709551615 5 Color 11 14 11 19 2 1 { 11 20 11 21 18446744073709551615 5 WHITE 11 22 11 27 3 1 , 11 27 11 28 18446744073709551615 5 BLACK 11 29 11 34 4 1 } 11 35 11 36 18446744073709551615 1 ; 11 36 11 37 18446744073709551615 5 class 13 3 13 8 18446744073709551615 5 Piece 13 9 13 14 5 1 { 13 15 13 16 18446744073709551615 6 public 14 3 14 9 18446744073709551615 1 : 14 9 14 10 18446744073709551615 5 Color 15 5 15 10 2 5 color 15 11 15 16 6 1 ; 15 16 15 17 18446744073709551615 5 Piece 17 5 17 10 5 1 ( 17 10 17 11 5 5 Color 17 11 17 16 2 5 color 17 17 17 22 7 1 ) 17 22 17 23 5 1 : 17 24 17 25 5 5 color 17 26 17 31 6 1 ( 17 31 17 32 5 5 color 17 32 17 37 7 1 ) 17 37 17 38 5 1 { 17 39 17 40 18446744073709551615 1 } 17 40 17 41 18446744073709551615 7 virtual 18 5 18 12 18446744073709551615 1 ~ 18 13 18 14 18446744073709551615 5 Piece 18 14 18 19 5 1 ( 18 19 18 20 18446744073709551615 1 ) 18 20 18 21 18446744073709551615 1 { 18 22 18 23 18446744073709551615 1 } 18 23 18 24 18446744073709551615 6 string 21 5 21 11 8 12 color_string 21 12 21 24 9 1 ( 21 24 21 25 9 1 ) 21 25 21 26 9 5 const 21 27 21 32 18446744073709551615 1 { 21 33 21 34 18446744073709551615 2 if 22 7 22 9 18446744073709551615 1 ( 22 10 22 11 18446744073709551615 5 color 22 11 22 16 6 2 == 22 17 22 19 18446744073709551615 5 Color 22 20 22 25 2 2 :: 22 25 22 27 18446744073709551615 5 WHITE 22 27 22 32 3 1 ) 22 32 22 33 18446744073709551615 6 return 23 9 23 15 18446744073709551615 7 "white" 23 16 23 23 18446744073709551615 1 ; 23 23 23 24 18446744073709551615 4 else 24 7 24 11 18446744073709551615 6 return 25 9 25 15 18446744073709551615 7 "black" 25 16 25 23 18446744073709551615 1 ; 25 23 25 24 18446744073709551615 1 } 26 5 26 6 18446744073709551615 44 /// Return color and type of the chess piece 28 5 28 49 18446744073709551615 7 virtual 29 5 29 12 18446744073709551615 6 string 29 13 29 19 8 4 type 29 20 29 24 10 1 ( 29 24 29 25 10 1 ) 29 25 29 26 10 5 const 29 27 29 32 18446744073709551615 1 = 29 33 29 34 10 1 0 29 35 29 36 18446744073709551615 1 ; 29 36 29 37 18446744073709551615 55 /// Returns true if the given chess piece move is valid 31 5 31 60 18446744073709551615 7 virtual 32 5 32 12 18446744073709551615 4 bool 32 13 32 17 18446744073709551615 10 valid_move 32 18 32 28 11 1 ( 32 28 32 29 11 3 int 32 29 32 32 18446744073709551615 6 from_x 32 33 32 39 12 1 , 32 39 32 40 11 3 int 32 41 32 44 18446744073709551615 6 from_y 32 45 32 51 13 1 , 32 51 32 52 11 3 int 32 53 32 56 18446744073709551615 4 to_x 32 57 32 61 14 1 , 32 61 32 62 11 3 int 32 63 32 66 18446744073709551615 4 to_y 32 67 32 71 15 1 ) 32 71 32 72 11 5 const 32 73 32 78 18446744073709551615 1 = 32 79 32 80 11 1 0 32 81 32 82 18446744073709551615 1 ; 32 82 32 83 18446744073709551615 7 virtual 34 5 34 12 18446744073709551615 6 string 34 13 34 19 8 9 shortName 34 20 34 29 16 1 ( 34 29 34 30 16 1 ) 34 30 34 31 16 5 const 34 32 34 37 18446744073709551615 1 = 34 38 34 39 16 1 0 34 40 34 41 18446744073709551615 1 ; 34 41 34 42 18446744073709551615 1 } 35 3 35 4 18446744073709551615 1 ; 35 4 35 5 18446744073709551615 5 class 37 3 37 8 18446744073709551615 4 King 37 9 37 13 17 1 : 37 14 37 15 18446744073709551615 6 public 37 16 37 22 18446744073709551615 5 Piece 37 23 37 28 5 1 { 37 29 37 30 18446744073709551615 6 public 38 3 38 9 18446744073709551615 1 : 38 9 38 10 18446744073709551615 4 King 39 5 39 9 17 1 ( 39 9 39 10 17 5 Color 39 10 39 15 2 5 color 39 16 39 21 18 1 ) 39 21 39 22 17 1 : 39 23 39 24 17 5 Piece 39 25 39 30 5 1 ( 39 30 39 31 5 5 color 39 31 39 36 18 1 ) 39 36 39 37 5 1 { 39 37 39 38 18446744073709551615 1 } 39 38 39 39 18446744073709551615 1 ; 39 39 39 40 18446744073709551615 1 ~ 40 5 40 6 18446744073709551615 4 King 40 6 40 10 17 1 ( 40 10 40 11 18446744073709551615 1 ) 40 11 40 12 18446744073709551615 1 { 40 12 40 13 18446744073709551615 1 } 40 13 40 14 18446744073709551615 1 ; 40 14 40 15 18446744073709551615 6 string 42 5 42 11 8 4 type 42 12 42 16 10 1 ( 42 16 42 17 10 1 ) 42 17 42 18 10 5 const 42 19 42 24 18446744073709551615 8 override 42 25 42 33 18446744073709551615 1 { 42 34 42 35 18446744073709551615 6 return 43 7 43 13 18446744073709551615 12 color_string 43 14 43 26 9 1 ( 43 26 43 27 9 1 ) 43 27 43 28 9 1 + 43 29 43 30 19 7 " king" 43 31 43 38 18446744073709551615 1 ; 43 38 43 39 18446744073709551615 1 } 44 5 44 6 18446744073709551615 4 bool 46 5 46 9 18446744073709551615 10 valid_move 46 10 46 20 11 1 ( 46 20 46 21 11 3 int 46 21 46 24 18446744073709551615 6 from_x 46 25 46 31 20 1 , 46 31 46 32 11 3 int 46 33 46 36 18446744073709551615 6 from_y 46 37 46 43 21 1 , 46 43 46 44 11 3 int 46 45 46 48 18446744073709551615 4 to_x 46 49 46 53 22 1 , 46 53 46 54 11 3 int 46 55 46 58 18446744073709551615 4 to_y 46 59 46 63 23 1 ) 46 63 46 64 11 5 const 46 65 46 70 18446744073709551615 8 override 46 71 46 79 18446744073709551615 1 { 46 80 46 81 18446744073709551615 6 return 47 7 47 13 18446744073709551615 1 ( 47 14 47 15 18446744073709551615 3 abs 47 15 47 18 24 1 ( 47 18 47 19 24 4 to_x 47 19 47 23 22 1 - 47 24 47 25 18446744073709551615 6 from_x 47 26 47 32 20 1 ) 47 32 47 33 24 2 <= 47 34 47 36 18446744073709551615 1 1 47 37 47 38 18446744073709551615 2 && 47 39 47 41 18446744073709551615 3 abs 47 42 47 45 24 1 ( 47 45 47 46 24 4 to_y 47 46 47 50 23 1 - 47 51 47 52 18446744073709551615 6 from_y 47 53 47 59 21 1 ) 47 59 47 60 24 2 <= 47 61 47 63 18446744073709551615 1 1 47 64 47 65 18446744073709551615 1 ) 47 65 47 66 18446744073709551615 1 ; 47 66 47 67 18446744073709551615 1 } 48 5 48 6 18446744073709551615 6 string 50 5 50 11 8 9 shortName 50 12 50 21 16 1 ( 50 21 50 22 16 1 ) 50 22 50 23 16 5 const 50 24 50 29 18446744073709551615 8 override 50 30 50 38 18446744073709551615 1 { 50 39 50 40 18446744073709551615 2 if 51 7 51 9 18446744073709551615 1 ( 51 10 51 11 18446744073709551615 12 color_string 51 11 51 23 9 1 ( 51 23 51 24 9 1 ) 51 24 51 25 9 2 == 51 26 51 28 25 7 "white" 51 29 51 36 18446744073709551615 1 ) 51 36 51 37 18446744073709551615 1 { 51 38 51 39 18446744073709551615 6 return 52 9 52 15 18446744073709551615 6 "W-Ki" 52 16 52 22 18446744073709551615 1 ; 52 22 52 23 18446744073709551615 1 } 53 7 53 8 18446744073709551615 4 else 53 9 53 13 18446744073709551615 1 { 53 14 53 15 18446744073709551615 6 return 54 9 54 15 18446744073709551615 6 "B-Ki" 54 16 54 22 18446744073709551615 1 ; 54 22 54 23 18446744073709551615 1 } 55 7 55 8 18446744073709551615 1 } 56 5 56 6 18446744073709551615 1 } 57 3 57 4 18446744073709551615 1 ; 57 4 57 5 18446744073709551615 5 class 59 3 59 8 18446744073709551615 6 Knight 59 9 59 15 26 1 : 59 16 59 17 18446744073709551615 6 public 59 18 59 24 18446744073709551615 5 Piece 59 25 59 30 5 1 { 59 31 59 32 18446744073709551615 6 public 60 3 60 9 18446744073709551615 1 : 60 9 60 10 18446744073709551615 6 Knight 61 5 61 11 26 1 ( 61 11 61 12 26 5 Color 61 12 61 17 2 5 color 61 18 61 23 27 1 ) 61 23 61 24 26 1 : 61 25 61 26 26 5 Piece 61 27 61 32 5 1 ( 61 32 61 33 5 5 color 61 33 61 38 27 1 ) 61 38 61 39 5 1 { 61 39 61 40 18446744073709551615 1 } 61 40 61 41 18446744073709551615 1 ; 61 41 61 42 18446744073709551615 1 ~ 62 5 62 6 18446744073709551615 6 Knight 62 6 62 12 26 1 ( 62 12 62 13 18446744073709551615 1 ) 62 13 62 14 18446744073709551615 1 { 62 14 62 15 18446744073709551615 1 } 62 15 62 16 18446744073709551615 1 ; 62 16 62 17 18446744073709551615 6 string 64 5 64 11 8 4 type 64 12 64 16 10 1 ( 64 16 64 17 10 1 ) 64 17 64 18 10 5 const 64 19 64 24 18446744073709551615 8 override 64 25 64 33 18446744073709551615 1 { 64 34 64 35 18446744073709551615 6 return 65 7 65 13 18446744073709551615 12 color_string 65 14 65 26 9 1 ( 65 26 65 27 9 1 ) 65 27 65 28 9 1 + 65 29 65 30 19 9 " knight" 65 31 65 40 18446744073709551615 1 ; 65 40 65 41 18446744073709551615 1 } 66 5 66 6 18446744073709551615 4 bool 68 5 68 9 18446744073709551615 10 valid_move 68 10 68 20 11 1 ( 68 20 68 21 11 3 int 68 21 68 24 18446744073709551615 6 from_x 68 25 68 31 28 1 , 68 31 68 32 11 3 int 68 33 68 36 18446744073709551615 6 from_y 68 37 68 43 29 1 , 68 43 68 44 11 3 int 68 45 68 48 18446744073709551615 4 to_x 68 49 68 53 30 1 , 68 53 68 54 11 3 int 68 55 68 58 18446744073709551615 4 to_y 68 59 68 63 31 1 ) 68 63 68 64 11 5 const 68 65 68 70 18446744073709551615 8 override 68 71 68 79 18446744073709551615 1 { 68 80 68 81 18446744073709551615 2 if 69 7 69 9 18446744073709551615 1 ( 69 10 69 11 18446744073709551615 1 ( 69 11 69 12 18446744073709551615 3 abs 69 12 69 15 24 1 ( 69 15 69 16 24 4 to_x 69 16 69 20 30 1 - 69 21 69 22 18446744073709551615 6 from_x 69 23 69 29 28 1 ) 69 29 69 30 24 2 == 69 31 69 33 18446744073709551615 1 2 69 34 69 35 18446744073709551615 2 && 69 36 69 38 18446744073709551615 3 abs 69 39 69 42 24 1 ( 69 42 69 43 24 4 to_y 69 43 69 47 31 1 - 69 48 69 49 18446744073709551615 6 from_y 69 50 69 56 29 1 ) 69 56 69 57 24 2 == 69 58 69 60 18446744073709551615 1 1 69 61 69 62 18446744073709551615 1 ) 69 62 69 63 18446744073709551615 2 || 69 64 69 66 18446744073709551615 1 ( 69 67 69 68 18446744073709551615 3 abs 69 68 69 71 24 1 ( 69 71 69 72 24 4 to_x 69 72 69 76 30 1 - 69 77 69 78 18446744073709551615 6 from_x 69 79 69 85 28 1 ) 69 85 69 86 24 2 == 69 87 69 89 18446744073709551615 1 1 69 90 69 91 18446744073709551615 2 && 69 92 69 94 18446744073709551615 3 abs 69 95 69 98 24 1 ( 69 98 69 99 24 4 to_y 69 99 69 103 31 1 - 69 104 69 105 18446744073709551615 6 from_y 69 106 69 112 29 1 ) 69 112 69 113 24 2 == 69 114 69 116 18446744073709551615 1 2 69 117 69 118 18446744073709551615 1 ) 69 118 69 119 18446744073709551615 1 ) 69 119 69 120 18446744073709551615 1 { 69 121 69 122 18446744073709551615 6 return 70 9 70 15 18446744073709551615 4 true 70 16 70 20 18446744073709551615 1 ; 70 20 70 21 18446744073709551615 1 } 71 7 71 8 18446744073709551615 4 else 71 9 71 13 18446744073709551615 1 { 71 14 71 15 18446744073709551615 6 return 72 9 72 15 18446744073709551615 5 false 72 16 72 21 18446744073709551615 1 ; 72 21 72 22 18446744073709551615 1 } 73 7 73 8 18446744073709551615 1 } 74 5 74 6 18446744073709551615 6 string 76 5 76 11 8 9 shortName 76 12 76 21 16 1 ( 76 21 76 22 16 1 ) 76 22 76 23 16 5 const 76 24 76 29 18446744073709551615 8 override 76 30 76 38 18446744073709551615 1 { 76 39 76 40 18446744073709551615 2 if 77 7 77 9 18446744073709551615 1 ( 77 10 77 11 18446744073709551615 12 color_string 77 11 77 23 9 1 ( 77 23 77 24 9 1 ) 77 24 77 25 9 2 == 77 26 77 28 25 7 "white" 77 29 77 36 18446744073709551615 1 ) 77 36 77 37 18446744073709551615 1 { 77 38 77 39 18446744073709551615 6 return 78 9 78 15 18446744073709551615 6 "W-Kn" 78 16 78 22 18446744073709551615 1 ; 78 22 78 23 18446744073709551615 1 } 79 7 79 8 18446744073709551615 4 else 79 9 79 13 18446744073709551615 1 { 79 14 79 15 18446744073709551615 6 return 80 9 80 15 18446744073709551615 6 "B-Kn" 80 16 80 22 18446744073709551615 1 ; 80 22 80 23 18446744073709551615 1 } 81 7 81 8 18446744073709551615 1 } 82 5 82 6 18446744073709551615 1 } 83 3 83 4 18446744073709551615 1 ; 83 4 83 5 18446744073709551615 10 ChessBoard 85 3 85 13 1 1 ( 85 13 85 14 1 1 ) 85 14 85 15 1 1 { 85 16 85 17 18446744073709551615 57 // Initialize the squares stored in 8 columns and 8 rows: 86 5 86 62 18446744073709551615 7 squares 87 5 87 12 32 1 . 87 12 87 13 33 6 resize 87 13 87 19 33 1 ( 87 19 87 20 33 1 8 87 20 87 21 18446744073709551615 1 ) 87 21 87 22 33 1 ; 87 22 87 23 18446744073709551615 3 for 88 5 88 8 18446744073709551615 1 ( 88 9 88 10 18446744073709551615 4 auto 88 10 88 14 18446744073709551615 1 & 88 15 88 16 18446744073709551615 13 square_column 88 16 88 29 34 1 : 88 30 88 31 35 7 squares 88 32 88 39 32 1 ) 88 39 88 40 18446744073709551615 13 square_column 89 7 89 20 34 1 . 89 20 89 21 33 6 resize 89 21 89 27 33 1 ( 89 27 89 28 33 1 8 89 28 89 29 18446744073709551615 1 ) 89 29 89 30 33 1 ; 89 30 89 31 18446744073709551615 1 } 90 3 90 4 18446744073709551615 47 /// 8x8 squares occupied by 1 or 0 chess pieces 92 3 92 50 18446744073709551615 6 vector 93 3 93 9 36 1 < 93 9 93 10 18446744073709551615 6 vector 93 10 93 16 36 1 < 93 16 93 17 18446744073709551615 10 unique_ptr 93 17 93 27 37 1 < 93 27 93 28 18446744073709551615 5 Piece 93 28 93 33 5 2 >> 93 33 93 35 18446744073709551615 1 > 93 35 93 36 18446744073709551615 7 squares 93 37 93 44 32 1 ; 93 44 93 45 18446744073709551615 8 function 94 3 94 11 38 1 < 94 11 94 12 18446744073709551615 4 void 94 12 94 16 18446744073709551615 1 ( 94 16 94 17 18446744073709551615 1 ) 94 17 94 18 18446744073709551615 1 > 94 18 94 19 18446744073709551615 16 after_piece_move 94 20 94 36 39 1 ; 94 36 94 37 18446744073709551615 45 /// Move a chess piece if it is a valid move. 97 3 97 48 18446744073709551615 41 /// Does not test for check or checkmate. 98 3 98 44 18446744073709551615 4 bool 99 3 99 7 18446744073709551615 10 move_piece 99 8 99 18 40 1 ( 99 18 99 19 40 5 const 99 19 99 24 18446744073709551615 3 std 99 25 99 28 0 2 :: 99 28 99 30 18446744073709551615 6 string 99 30 99 36 8 1 & 99 37 99 38 18446744073709551615 4 from 99 38 99 42 41 1 , 99 42 99 43 40 5 const 99 44 99 49 18446744073709551615 3 std 99 50 99 53 0 2 :: 99 53 99 55 18446744073709551615 6 string 99 55 99 61 8 1 & 99 62 99 63 18446744073709551615 2 to 99 63 99 65 42 1 ) 99 65 99 66 40 1 { 99 67 99 68 18446744073709551615 3 int 100 5 100 8 18446744073709551615 6 from_x 100 9 100 15 43 1 = 100 16 100 17 18446744073709551615 4 from 100 18 100 22 41 1 [ 100 22 100 23 44 1 0 100 23 100 24 18446744073709551615 1 ] 100 24 100 25 44 1 - 100 26 100 27 18446744073709551615 3 'a' 100 28 100 31 18446744073709551615 1 ; 100 31 100 32 18446744073709551615 3 int 101 5 101 8 18446744073709551615 6 from_y 101 9 101 15 45 1 = 101 16 101 17 18446744073709551615 4 stoi 101 18 101 22 46 1 ( 101 22 101 23 46 6 string 101 23 101 29 8 1 ( 101 29 101 30 47 1 ) 101 30 101 31 47 1 + 101 32 101 33 19 4 from 101 34 101 38 41 1 [ 101 38 101 39 44 1 1 101 39 101 40 18446744073709551615 1 ] 101 40 101 41 44 1 ) 101 41 101 42 46 1 - 101 43 101 44 18446744073709551615 1 1 101 45 101 46 18446744073709551615 1 ; 101 46 101 47 18446744073709551615 3 int 102 5 102 8 18446744073709551615 4 to_x 102 9 102 13 48 1 = 102 14 102 15 18446744073709551615 2 to 102 16 102 18 42 1 [ 102 18 102 19 44 1 0 102 19 102 20 18446744073709551615 1 ] 102 20 102 21 44 1 - 102 22 102 23 18446744073709551615 3 'a' 102 24 102 27 18446744073709551615 1 ; 102 27 102 28 18446744073709551615 3 int 103 5 103 8 18446744073709551615 4 to_y 103 9 103 13 49 1 = 103 14 103 15 18446744073709551615 4 stoi 103 16 103 20 46 1 ( 103 20 103 21 46 6 string 103 21 103 27 8 1 ( 103 27 103 28 47 1 ) 103 28 103 29 47 1 + 103 30 103 31 19 2 to 103 32 103 34 42 1 [ 103 34 103 35 44 1 1 103 35 103 36 18446744073709551615 1 ] 103 36 103 37 44 1 ) 103 37 103 38 46 1 - 103 39 103 40 18446744073709551615 1 1 103 41 103 42 18446744073709551615 1 ; 103 42 103 43 18446744073709551615 4 auto 105 5 105 9 18446744073709551615 1 & 105 10 105 11 18446744073709551615 10 piece_from 105 11 105 21 50 1 = 105 22 105 23 18446744073709551615 7 squares 105 24 105 31 32 1 [ 105 31 105 32 51 6 from_x 105 32 105 38 43 1 ] 105 38 105 39 51 1 [ 105 39 105 40 51 6 from_y 105 40 105 46 45 1 ] 105 46 105 47 51 1 ; 105 47 105 48 18446744073709551615 2 if 106 5 106 7 18446744073709551615 1 ( 106 8 106 9 18446744073709551615 10 piece_from 106 9 106 19 50 1 ) 106 19 106 20 18446744073709551615 1 { 106 21 106 22 18446744073709551615 2 if 107 7 107 9 18446744073709551615 1 ( 107 10 107 11 18446744073709551615 10 piece_from 107 11 107 21 50 2 -> 107 21 107 23 11 10 valid_move 107 23 107 33 11 1 ( 107 33 107 34 11 6 from_x 107 34 107 40 43 1 , 107 40 107 41 11 6 from_y 107 42 107 48 45 1 , 107 48 107 49 11 4 to_x 107 50 107 54 48 1 , 107 54 107 55 11 4 to_y 107 56 107 60 49 1 ) 107 60 107 61 11 1 ) 107 61 107 62 18446744073709551615 1 { 107 63 107 64 18446744073709551615 4 cout 108 9 108 13 52 2 << 108 14 108 16 53 10 piece_from 108 17 108 27 50 2 -> 108 27 108 29 10 4 type 108 29 108 33 10 1 ( 108 33 108 34 10 1 ) 108 34 108 35 10 2 << 108 36 108 38 53 18 " is moving from " 108 39 108 57 18446744073709551615 2 << 108 58 108 60 53 4 from 108 61 108 65 41 2 << 108 66 108 68 53 6 " to " 108 69 108 75 18446744073709551615 2 << 108 76 108 78 53 2 to 108 79 108 81 42 2 << 108 82 108 84 54 4 endl 108 85 108 89 55 1 ; 108 89 108 90 18446744073709551615 4 auto 109 9 109 13 18446744073709551615 1 & 109 14 109 15 18446744073709551615 8 piece_to 109 15 109 23 56 1 = 109 24 109 25 18446744073709551615 7 squares 109 26 109 33 32 1 [ 109 33 109 34 51 4 to_x 109 34 109 38 48 1 ] 109 38 109 39 51 1 [ 109 39 109 40 51 4 to_y 109 40 109 44 49 1 ] 109 44 109 45 51 1 ; 109 45 109 46 18446744073709551615 2 if 110 9 110 11 18446744073709551615 1 ( 110 12 110 13 18446744073709551615 8 piece_to 110 13 110 21 56 1 ) 110 21 110 22 18446744073709551615 1 { 110 23 110 24 18446744073709551615 2 if 111 11 111 13 18446744073709551615 1 ( 111 14 111 15 18446744073709551615 10 piece_from 111 15 111 25 50 2 -> 111 25 111 27 18446744073709551615 5 color 111 27 111 32 6 2 != 111 33 111 35 18446744073709551615 8 piece_to 111 36 111 44 56 2 -> 111 44 111 46 18446744073709551615 5 color 111 46 111 51 6 1 ) 111 51 111 52 18446744073709551615 1 { 111 53 111 54 18446744073709551615 4 cout 112 13 112 17 52 2 << 112 18 112 20 53 8 piece_to 112 21 112 29 56 2 -> 112 29 112 31 10 4 type 112 31 112 35 10 1 ( 112 35 112 36 10 1 ) 112 36 112 37 10 2 << 112 38 112 40 53 25 " is being removed from " 112 41 112 66 18446744073709551615 2 << 112 67 112 69 53 2 to 112 70 112 72 42 2 << 112 73 112 75 54 4 endl 112 76 112 80 55 1 ; 112 80 112 81 18446744073709551615 2 if 113 13 113 15 18446744073709551615 1 ( 113 16 113 17 18446744073709551615 4 auto 113 17 113 21 18446744073709551615 4 king 113 22 113 26 57 1 = 113 27 113 28 18446744073709551615 12 dynamic_cast 113 29 113 41 18446744073709551615 1 < 113 41 113 42 18446744073709551615 4 King 113 42 113 46 17 1 * 113 47 113 48 18446744073709551615 1 > 113 48 113 49 18446744073709551615 1 ( 113 49 113 50 18446744073709551615 8 piece_to 113 50 113 58 56 1 . 113 58 113 59 58 3 get 113 59 113 62 58 1 ( 113 62 113 63 58 1 ) 113 63 113 64 58 1 ) 113 64 113 65 18446744073709551615 1 ) 113 65 113 66 18446744073709551615 4 cout 114 15 114 19 52 2 << 114 20 114 22 53 4 king 114 23 114 27 57 2 -> 114 27 114 29 9 12 color_string 114 29 114 41 9 1 ( 114 41 114 42 9 1 ) 114 42 114 43 9 2 << 114 44 114 46 53 16 " lost the game" 114 47 114 63 18446744073709551615 2 << 114 64 114 66 54 4 endl 114 67 114 71 55 1 ; 114 71 114 72 18446744073709551615 1 } 115 11 115 12 18446744073709551615 4 else 115 13 115 17 18446744073709551615 1 { 115 18 115 19 18446744073709551615 76 // piece in the from square has the same color as the piece in the to square 116 13 116 89 18446744073709551615 4 cout 117 13 117 17 52 2 << 117 18 117 20 53 15 "can not move " 117 21 117 36 18446744073709551615 2 << 117 37 117 39 53 10 piece_from 117 40 117 50 50 2 -> 117 50 117 52 10 4 type 117 52 117 56 10 1 ( 117 56 117 57 10 1 ) 117 57 117 58 10 2 << 117 59 117 61 53 8 " from " 117 62 117 70 18446744073709551615 2 << 117 71 117 73 53 4 from 117 74 117 78 41 2 << 117 79 117 81 53 6 " to " 117 82 117 88 18446744073709551615 2 << 117 89 117 91 53 2 to 117 92 117 94 42 2 << 117 95 117 97 54 4 endl 117 98 117 102 55 1 ; 117 102 117 103 18446744073709551615 6 return 118 13 118 19 18446744073709551615 5 false 118 20 118 25 18446744073709551615 1 ; 118 25 118 26 18446744073709551615 1 } 119 11 119 12 18446744073709551615 1 } 120 9 120 10 18446744073709551615 8 piece_to 121 9 121 17 56 1 = 121 18 121 19 59 4 move 121 20 121 24 60 1 ( 121 24 121 25 60 10 piece_from 121 25 121 35 50 1 ) 121 35 121 36 60 1 ; 121 36 121 37 18446744073709551615 2 if 122 9 122 11 18446744073709551615 1 ( 122 12 122 13 18446744073709551615 16 after_piece_move 122 13 122 29 39 1 ) 122 29 122 30 18446744073709551615 1 { 122 31 122 32 18446744073709551615 16 after_piece_move 123 11 123 27 39 1 ( 123 27 123 28 61 1 ) 123 28 123 29 61 1 ; 123 29 123 30 18446744073709551615 1 } 124 9 124 10 18446744073709551615 6 return 125 9 125 15 18446744073709551615 4 true 125 16 125 20 18446744073709551615 1 ; 125 20 125 21 18446744073709551615 1 } 126 7 126 8 18446744073709551615 4 else 126 9 126 13 18446744073709551615 1 { 126 14 126 15 18446744073709551615 4 cout 127 9 127 13 52 2 << 127 14 127 16 53 15 "can not move " 127 17 127 32 18446744073709551615 2 << 127 33 127 35 53 10 piece_from 127 36 127 46 50 2 -> 127 46 127 48 10 4 type 127 48 127 52 10 1 ( 127 52 127 53 10 1 ) 127 53 127 54 10 2 << 127 55 127 57 53 8 " from " 127 58 127 66 18446744073709551615 2 << 127 67 127 69 53 4 from 127 70 127 74 41 2 << 127 75 127 77 53 6 " to " 127 78 127 84 18446744073709551615 2 << 127 85 127 87 53 2 to 127 88 127 90 42 2 << 127 91 127 93 54 4 endl 127 94 127 98 55 1 ; 127 98 127 99 18446744073709551615 6 return 128 9 128 15 18446744073709551615 5 false 128 16 128 21 18446744073709551615 1 ; 128 21 128 22 18446744073709551615 1 } 129 7 129 8 18446744073709551615 1 } 130 5 130 6 18446744073709551615 4 else 130 7 130 11 18446744073709551615 1 { 130 12 130 13 18446744073709551615 4 cout 131 7 131 11 52 2 << 131 12 131 14 53 14 "no piece at " 131 15 131 29 18446744073709551615 2 << 131 30 131 32 53 4 from 131 33 131 37 41 2 << 131 38 131 40 54 4 endl 131 41 131 45 55 1 ; 131 45 131 46 18446744073709551615 6 return 132 7 132 13 18446744073709551615 5 false 132 14 132 19 18446744073709551615 1 ; 132 19 132 20 18446744073709551615 1 } 133 5 133 6 18446744073709551615 1 } 134 3 134 4 18446744073709551615 1 } 135 1 135 2 18446744073709551615 1 ; 135 2 135 3 18446744073709551615 5 class 137 1 137 6 18446744073709551615 15 ChessBoardPrint 137 7 137 22 62 1 { 137 23 137 24 18446744073709551615 6 public 138 1 138 7 18446744073709551615 1 : 138 7 138 8 18446744073709551615 15 ChessBoardPrint 139 3 139 18 62 1 ( 139 18 139 19 62 10 ChessBoard 139 19 139 29 1 1 & 139 30 139 31 18446744073709551615 5 board 139 31 139 36 63 1 ) 139 36 139 37 62 1 { 139 38 139 39 18446744073709551615 5 board 140 5 140 10 63 1 . 140 10 140 11 18446744073709551615 16 after_piece_move 140 11 140 27 39 1 = 140 28 140 29 64 1 [ 140 30 140 31 18446744073709551615 1 & 140 31 140 32 18446744073709551615 5 board 140 32 140 37 63 1 ] 140 37 140 38 18446744073709551615 1 ( 140 38 140 39 18446744073709551615 1 ) 140 39 140 40 18446744073709551615 1 { 140 41 140 42 18446744073709551615 3 for 141 7 141 10 18446744073709551615 1 ( 141 11 141 12 18446744073709551615 3 int 141 12 141 15 18446744073709551615 1 i 141 16 141 17 65 1 = 141 18 141 19 18446744073709551615 1 0 141 20 141 21 18446744073709551615 1 ; 141 21 141 22 18446744073709551615 1 i 141 23 141 24 65 1 < 141 25 141 26 18446744073709551615 1 8 141 27 141 28 18446744073709551615 1 ; 141 28 141 29 18446744073709551615 1 i 141 30 141 31 65 2 ++ 141 31 141 33 18446744073709551615 1 ) 141 33 141 34 18446744073709551615 1 { 141 35 141 36 18446744073709551615 4 cout 142 9 142 13 52 2 << 142 14 142 16 53 44 "------------------------------------------" 142 17 142 61 18446744073709551615 2 << 142 62 142 64 54 4 endl 142 65 142 69 55 1 ; 142 69 142 70 18446744073709551615 3 for 143 9 143 12 18446744073709551615 1 ( 143 13 143 14 18446744073709551615 3 int 143 14 143 17 18446744073709551615 1 j 143 18 143 19 66 1 = 143 20 143 21 18446744073709551615 1 0 143 22 143 23 18446744073709551615 1 ; 143 23 143 24 18446744073709551615 1 j 143 25 143 26 66 1 < 143 27 143 28 18446744073709551615 1 8 143 29 143 30 18446744073709551615 1 ; 143 30 143 31 18446744073709551615 1 j 143 32 143 33 66 2 ++ 143 33 143 35 18446744073709551615 1 ) 143 35 143 36 18446744073709551615 1 { 143 37 143 38 18446744073709551615 4 cout 144 11 144 15 52 2 << 144 16 144 18 53 3 "|" 144 19 144 22 18446744073709551615 1 ; 144 22 144 23 18446744073709551615 4 auto 145 11 145 15 18446744073709551615 1 & 145 16 145 17 18446744073709551615 10 piece_from 145 17 145 27 67 1 = 145 28 145 29 18446744073709551615 5 board 145 30 145 35 63 1 . 145 35 145 36 18446744073709551615 7 squares 145 36 145 43 32 1 [ 145 43 145 44 51 1 j 145 44 145 45 66 1 ] 145 45 145 46 51 1 [ 145 46 145 47 51 1 i 145 47 145 48 65 1 ] 145 48 145 49 51 1 ; 145 49 145 50 18446744073709551615 2 if 146 11 146 13 18446744073709551615 1 ( 146 14 146 15 18446744073709551615 10 piece_from 146 15 146 25 67 1 ) 146 25 146 26 18446744073709551615 1 { 146 27 146 28 18446744073709551615 4 cout 147 13 147 17 52 2 << 147 18 147 20 53 10 piece_from 147 21 147 31 67 2 -> 147 31 147 33 16 9 shortName 147 33 147 42 16 1 ( 147 42 147 43 16 1 ) 147 43 147 44 16 1 ; 147 44 147 45 18446744073709551615 1 } 148 11 148 12 18446744073709551615 4 else 148 13 148 17 18446744073709551615 1 { 148 18 148 19 18446744073709551615 4 cout 149 13 149 17 52 2 << 149 18 149 20 53 6 "    " 149 21 149 27 18446744073709551615 1 ; 149 27 149 28 18446744073709551615 1 } 150 11 150 12 18446744073709551615 1 } 151 9 151 10 18446744073709551615 4 cout 152 9 152 13 52 2 << 152 14 152 16 53 3 "|" 152 17 152 20 18446744073709551615 2 << 152 21 152 23 54 4 endl 152 24 152 28 55 1 ; 152 28 152 29 18446744073709551615 1 } 153 7 153 8 18446744073709551615 4 cout 154 7 154 11 52 2 << 154 12 154 14 53 44 "------------------------------------------" 154 15 154 59 18446744073709551615 2 << 154 60 154 62 54 4 endl 154 63 154 67 55 2 << 154 68 154 70 54 4 endl 154 71 154 75 55 1 ; 154 75 154 76 18446744073709551615 1 } 155 5 155 6 18446744073709551615 1 ; 155 6 155 7 18446744073709551615 1 } 156 3 156 4 18446744073709551615 1 } 157 1 157 2 18446744073709551615 1 ; 157 2 157 3 18446744073709551615 3 int 159 1 159 4 18446744073709551615 4 main 159 5 159 9 68 1 ( 159 9 159 10 68 1 ) 159 10 159 11 68 1 { 159 12 159 13 18446744073709551615 10 ChessBoard 160 3 160 13 1 5 board 160 14 160 19 69 1 ; 160 19 160 20 18446744073709551615 15 ChessBoardPrint 161 3 161 18 62 5 print 161 19 161 24 70 1 ( 161 24 161 25 62 5 board 161 25 161 30 69 1 ) 161 30 161 31 62 1 ; 161 31 161 32 18446744073709551615 5 board 163 3 163 8 69 1 . 163 8 163 9 18446744073709551615 7 squares 163 9 163 16 32 1 [ 163 16 163 17 51 1 4 163 17 163 18 18446744073709551615 1 ] 163 18 163 19 51 1 [ 163 19 163 20 51 1 0 163 20 163 21 18446744073709551615 1 ] 163 21 163 22 51 1 = 163 23 163 24 59 11 make_unique 163 25 163 36 71 1 < 163 36 163 37 71 10 ChessBoard 163 37 163 47 1 2 :: 163 47 163 49 71 4 King 163 49 163 53 17 1 > 163 53 163 54 71 1 ( 163 54 163 55 71 10 ChessBoard 163 55 163 65 1 2 :: 163 65 163 67 18446744073709551615 5 Color 163 67 163 72 2 2 :: 163 72 163 74 18446744073709551615 5 WHITE 163 74 163 79 3 1 ) 163 79 163 80 71 1 ; 163 80 163 81 18446744073709551615 5 board 164 3 164 8 69 1 . 164 8 164 9 18446744073709551615 7 squares 164 9 164 16 32 1 [ 164 16 164 17 51 1 1 164 17 164 18 18446744073709551615 1 ] 164 18 164 19 51 1 [ 164 19 164 20 51 1 0 164 20 164 21 18446744073709551615 1 ] 164 21 164 22 51 1 = 164 23 164 24 59 11 make_unique 164 25 164 36 71 1 < 164 36 164 37 71 10 ChessBoard 164 37 164 47 1 2 :: 164 47 164 49 71 6 Knight 164 49 164 55 26 1 > 164 55 164 56 71 1 ( 164 56 164 57 71 10 ChessBoard 164 57 164 67 1 2 :: 164 67 164 69 18446744073709551615 5 Color 164 69 164 74 2 2 :: 164 74 164 76 18446744073709551615 5 WHITE 164 76 164 81 3 1 ) 164 81 164 82 71 1 ; 164 82 164 83 18446744073709551615 5 board 165 3 165 8 69 1 . 165 8 165 9 18446744073709551615 7 squares 165 9 165 16 32 1 [ 165 16 165 17 51 1 6 165 17 165 18 18446744073709551615 1 ] 165 18 165 19 51 1 [ 165 19 165 20 51 1 0 165 20 165 21 18446744073709551615 1 ] 165 21 165 22 51 1 = 165 23 165 24 59 11 make_unique 165 25 165 36 71 1 < 165 36 165 37 71 10 ChessBoard 165 37 165 47 1 2 :: 165 47 165 49 71 6 Knight 165 49 165 55 26 1 > 165 55 165 56 71 1 ( 165 56 165 57 71 10 ChessBoard 165 57 165 67 1 2 :: 165 67 165 69 18446744073709551615 5 Color 165 69 165 74 2 2 :: 165 74 165 76 18446744073709551615 5 WHITE 165 76 165 81 3 1 ) 165 81 165 82 71 1 ; 165 82 165 83 18446744073709551615 5 board 167 3 167 8 69 1 . 167 8 167 9 18446744073709551615 7 squares 167 9 167 16 32 1 [ 167 16 167 17 51 1 4 167 17 167 18 18446744073709551615 1 ] 167 18 167 19 51 1 [ 167 19 167 20 51 1 7 167 20 167 21 18446744073709551615 1 ] 167 21 167 22 51 1 = 167 23 167 24 59 11 make_unique 167 25 167 36 71 1 < 167 36 167 37 71 10 ChessBoard 167 37 167 47 1 2 :: 167 47 167 49 71 4 King 167 49 167 53 17 1 > 167 53 167 54 71 1 ( 167 54 167 55 71 10 ChessBoard 167 55 167 65 1 2 :: 167 65 167 67 18446744073709551615 5 Color 167 67 167 72 2 2 :: 167 72 167 74 18446744073709551615 5 BLACK 167 74 167 79 4 1 ) 167 79 167 80 71 1 ; 167 80 167 81 18446744073709551615 5 board 168 3 168 8 69 1 . 168 8 168 9 18446744073709551615 7 squares 168 9 168 16 32 1 [ 168 16 168 17 51 1 1 168 17 168 18 18446744073709551615 1 ] 168 18 168 19 51 1 [ 168 19 168 20 51 1 7 168 20 168 21 18446744073709551615 1 ] 168 21 168 22 51 1 = 168 23 168 24 59 11 make_unique 168 25 168 36 71 1 < 168 36 168 37 71 10 ChessBoard 168 37 168 47 1 2 :: 168 47 168 49 71 6 Knight 168 49 168 55 26 1 > 168 55 168 56 71 1 ( 168 56 168 57 71 10 ChessBoard 168 57 168 67 1 2 :: 168 67 168 69 18446744073709551615 5 Color 168 69 168 74 2 2 :: 168 74 168 76 18446744073709551615 5 BLACK 168 76 168 81 4 1 ) 168 81 168 82 71 1 ; 168 82 168 83 18446744073709551615 5 board 169 3 169 8 69 1 . 169 8 169 9 18446744073709551615 7 squares 169 9 169 16 32 1 [ 169 16 169 17 51 1 6 169 17 169 18 18446744073709551615 1 ] 169 18 169 19 51 1 [ 169 19 169 20 51 1 7 169 20 169 21 18446744073709551615 1 ] 169 21 169 22 51 1 = 169 23 169 24 59 11 make_unique 169 25 169 36 71 1 < 169 36 169 37 71 10 ChessBoard 169 37 169 47 1 2 :: 169 47 169 49 71 6 Knight 169 49 169 55 26 1 > 169 55 169 56 71 1 ( 169 56 169 57 71 10 ChessBoard 169 57 169 67 1 2 :: 169 67 169 69 18446744073709551615 5 Color 169 69 169 74 2 2 :: 169 74 169 76 18446744073709551615 5 BLACK 169 76 169 81 4 1 ) 169 81 169 82 71 1 ; 169 82 169 83 18446744073709551615 4 cout 171 3 171 7 52 2 << 171 8 171 10 53 16 "Invalid moves:" 171 11 171 27 18446744073709551615 2 << 171 28 171 30 54 4 endl 171 31 171 35 55 1 ; 171 35 171 36 18446744073709551615 5 board 172 3 172 8 69 1 . 172 8 172 9 40 10 move_piece 172 9 172 19 40 1 ( 172 19 172 20 40 4 "e3" 172 20 172 24 18446744073709551615 1 , 172 24 172 25 40 4 "e2" 172 26 172 30 18446744073709551615 1 ) 172 30 172 31 40 1 ; 172 31 172 32 18446744073709551615 5 board 173 3 173 8 69 1 . 173 8 173 9 40 10 move_piece 173 9 173 19 40 1 ( 173 19 173 20 40 4 "e1" 173 20 173 24 18446744073709551615 1 , 173 24 173 25 40 4 "e3" 173 26 173 30 18446744073709551615 1 ) 173 30 173 31 40 1 ; 173 31 173 32 18446744073709551615 5 board 174 3 174 8 69 1 . 174 8 174 9 40 10 move_piece 174 9 174 19 40 1 ( 174 19 174 20 40 4 "b1" 174 20 174 24 18446744073709551615 1 , 174 24 174 25 40 4 "b2" 174 26 174 30 18446744073709551615 1 ) 174 30 174 31 40 1 ; 174 31 174 32 18446744073709551615 4 cout 175 3 175 7 52 2 << 175 8 175 10 54 4 endl 175 11 175 15 55 1 ; 175 15 175 16 18446744073709551615 4 cout 177 3 177 7 52 2 << 177 8 177 10 53 19 "A simulated game:" 177 11 177 30 18446744073709551615 2 << 177 31 177 33 54 4 endl 177 34 177 38 55 1 ; 177 38 177 39 18446744073709551615 5 board 178 3 178 8 69 1 . 178 8 178 9 40 10 move_piece 178 9 178 19 40 1 ( 178 19 178 20 40 4 "e1" 178 20 178 24 18446744073709551615 1 , 178 24 178 25 40 4 "e2" 178 26 178 30 18446744073709551615 1 ) 178 30 178 31 40 1 ; 178 31 178 32 18446744073709551615 5 board 179 3 179 8 69 1 . 179 8 179 9 40 10 move_piece 179 9 179 19 40 1 ( 179 19 179 20 40 4 "g8" 179 20 179 24 18446744073709551615 1 , 179 24 179 25 40 4 "h6" 179 26 179 30 18446744073709551615 1 ) 179 30 179 31 40 1 ; 179 31 179 32 18446744073709551615 5 board 180 3 180 8 69 1 . 180 8 180 9 40 10 move_piece 180 9 180 19 40 1 ( 180 19 180 20 40 4 "b1" 180 20 180 24 18446744073709551615 1 , 180 24 180 25 40 4 "c3" 180 26 180 30 18446744073709551615 1 ) 180 30 180 31 40 1 ; 180 31 180 32 18446744073709551615 5 board 181 3 181 8 69 1 . 181 8 181 9 40 10 move_piece 181 9 181 19 40 1 ( 181 19 181 20 40 4 "h6" 181 20 181 24 18446744073709551615 1 , 181 24 181 25 40 4 "g8" 181 26 181 30 18446744073709551615 1 ) 181 30 181 31 40 1 ; 181 31 181 32 18446744073709551615 5 board 182 3 182 8 69 1 . 182 8 182 9 40 10 move_piece 182 9 182 19 40 1 ( 182 19 182 20 40 4 "c3" 182 20 182 24 18446744073709551615 1 , 182 24 182 25 40 4 "d5" 182 26 182 30 18446744073709551615 1 ) 182 30 182 31 40 1 ; 182 31 182 32 18446744073709551615 5 board 183 3 183 8 69 1 . 183 8 183 9 40 10 move_piece 183 9 183 19 40 1 ( 183 19 183 20 40 4 "g8" 183 20 183 24 18446744073709551615 1 , 183 24 183 25 40 4 "h6" 183 26 183 30 18446744073709551615 1 ) 183 30 183 31 40 1 ; 183 31 183 32 18446744073709551615 5 board 184 3 184 8 69 1 . 184 8 184 9 40 10 move_piece 184 9 184 19 40 1 ( 184 19 184 20 40 4 "d5" 184 20 184 24 18446744073709551615 1 , 184 24 184 25 40 4 "f6" 184 26 184 30 18446744073709551615 1 ) 184 30 184 31 40 1 ; 184 31 184 32 18446744073709551615 5 board 185 3 185 8 69 1 . 185 8 185 9 40 10 move_piece 185 9 185 19 40 1 ( 185 19 185 20 40 4 "h6" 185 20 185 24 18446744073709551615 1 , 185 24 185 25 40 4 "g8" 185 26 185 30 18446744073709551615 1 ) 185 30 185 31 40 1 ; 185 31 185 32 18446744073709551615 5 board 186 3 186 8 69 1 . 186 8 186 9 40 10 move_piece 186 9 186 19 40 1 ( 186 19 186 20 40 4 "f6" 186 20 186 24 18446744073709551615 1 , 186 24 186 25 40 4 "e8" 186 26 186 30 18446744073709551615 1 ) 186 30 186 31 40 1 ; 186 31 186 32 18446744073709551615 1 } 187 1 187 2 18446744073709551615 0 0 72 0 0 0 22 0 0 1 2 0 3 std 4 1 2 0 10 ChessBoard 5 1 2 0 16 Color:ChessBoard 7 1 2 0 22 WHITE:Color:ChessBoard 7 1 2 0 22 BLACK:Color:ChessBoard 4 1 2 0 16 Piece:ChessBoard 6 1 2 0 22 color:Piece:ChessBoard 10 1 2 0 75 17:17:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 20 1 2 0 14 string:__1:std 21 1 2 0 29 color_string:Piece:ChessBoard 21 1 2 0 21 type:Piece:ChessBoard 21 1 2 0 27 valid_move:Piece:ChessBoard 10 1 2 0 75 32:33:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 10 1 2 0 75 32:45:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 10 1 2 0 75 32:57:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 10 1 2 0 75 32:67:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 21 1 2 0 26 shortName:Piece:ChessBoard 4 1 2 0 15 King:ChessBoard 10 1 2 0 75 39:16:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 8 1 2 0 17 operator+:__1:std 10 1 2 0 75 46:25:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 10 1 2 0 75 46:37:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 10 1 2 0 75 46:49:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 10 1 2 0 75 46:59:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 8 1 2 0 3 abs 8 1 2 0 18 operator==:__1:std 4 1 2 0 17 Knight:ChessBoard 10 1 2 0 75 61:18:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 10 1 2 0 75 68:25:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 10 1 2 0 75 68:37:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 10 1 2 0 75 68:49:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 10 1 2 0 75 68:59:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 6 1 2 0 18 squares:ChessBoard 21 1 2 0 21 resize:vector:__1:std 9 1 2 0 75 88:16:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 21 1 2 0 29 operator*:__wrap_iter:__1:std 31 1 2 0 14 vector:__1:std 31 1 2 0 18 unique_ptr:__1:std 31 1 2 0 16 function:__1:std 6 1 2 0 27 after_piece_move:ChessBoard 21 1 2 0 21 move_piece:ChessBoard 10 1 2 0 75 99:38:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 10 1 2 0 75 99:63:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 9 1 2 0 75 100:9:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 21 1 2 0 31 operator[]:basic_string:__1:std 9 1 2 0 75 101:9:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 8 1 2 0 12 stoi:__1:std 24 1 2 0 20 basic_string:__1:std 9 1 2 0 75 102:9:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 9 1 2 0 75 103:9:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 9 1 2 0 76 105:11:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 21 1 2 0 25 operator[]:vector:__1:std 9 1 2 0 12 cout:__1:std 8 1 2 0 16 operator:__1:std 21 1 2 0 30 operator:basic_ostream:__1:std 8 1 2 0 12 endl:__1:std 9 1 2 0 76 109:15:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 9 1 2 0 76 113:22:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 21 1 2 0 22 get:unique_ptr:__1:std 21 1 2 0 28 operator=:unique_ptr:__1:std 8 1 2 0 12 move:__1:std 21 1 2 0 25 operator:function:__1:std 4 1 2 0 15 ChessBoardPrint 10 1 2 0 76 139:31:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 21 1 2 0 26 operator=:function:__1:std 9 1 2 0 76 141:16:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 9 1 2 0 76 143:18:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 9 1 2 0 76 145:17:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 8 1 2 0 4 main 9 1 2 0 76 160:14:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 9 1 2 0 76 161:19:/Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 8 1 2 0 19 make_unique:__1:std 0 0 1 0 0 0 69 /Users/Nikolai/Documents/programmering/5semester/cpp/oving6/chess.cpp 1599492196