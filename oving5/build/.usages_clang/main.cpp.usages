22 serialization::archive 18 0 0 0 0 59 /Users/Nikolai/Documents/programmering/5semester/cpp/oving5 65 /Users/Nikolai/Documents/programmering/5semester/cpp/oving5/build 0 0 1089 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 1 < 1 10 1 11 18446744073709551615 8 iostream 1 11 1 19 18446744073709551615 1 > 1 19 1 20 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 6 memory 2 11 2 17 18446744073709551615 1 > 2 17 2 18 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 6 stdlib 3 11 3 17 18446744073709551615 1 . 3 17 3 18 18446744073709551615 1 h 3 18 3 19 18446744073709551615 1 > 3 19 3 20 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 6 string 4 11 4 17 18446744073709551615 1 > 4 17 4 18 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 6 vector 5 11 5 17 18446744073709551615 1 > 5 17 5 18 18446744073709551615 5 using 7 1 7 6 18446744073709551615 9 namespace 7 7 7 16 18446744073709551615 3 std 7 17 7 20 0 1 ; 7 20 7 21 18446744073709551615 5 class 9 1 9 6 18446744073709551615 10 ChessBoard 9 7 9 17 1 1 { 9 18 9 19 18446744073709551615 6 public 10 1 10 7 18446744073709551615 1 : 10 7 10 8 18446744073709551615 4 enum 11 3 11 7 18446744073709551615 5 class 11 8 11 13 18446744073709551615 5 Color 11 14 11 19 2 1 { 11 20 11 21 18446744073709551615 5 WHITE 11 22 11 27 3 1 , 11 27 11 28 18446744073709551615 5 BLACK 12 22 12 27 4 1 } 12 28 12 29 18446744073709551615 1 ; 12 29 12 30 18446744073709551615 5 class 14 3 14 8 18446744073709551615 5 Piece 14 9 14 14 5 1 { 14 15 14 16 18446744073709551615 6 public 15 3 15 9 18446744073709551615 1 : 15 9 15 10 18446744073709551615 5 Color 16 5 16 10 2 5 color 16 11 16 16 6 1 ; 16 16 16 17 18446744073709551615 5 Piece 18 5 18 10 5 1 ( 18 10 18 11 5 5 Color 18 11 18 16 2 5 color 18 17 18 22 7 1 ) 18 22 18 23 5 1 : 18 24 18 25 5 5 color 18 26 18 31 6 1 ( 18 31 18 32 5 5 color 18 32 18 37 7 1 ) 18 37 18 38 5 1 { 18 39 18 40 18446744073709551615 1 } 18 40 18 41 18446744073709551615 7 virtual 19 5 19 12 18446744073709551615 1 ~ 19 13 19 14 18446744073709551615 5 Piece 19 14 19 19 5 1 ( 19 19 19 20 18446744073709551615 1 ) 19 20 19 21 18446744073709551615 1 { 19 22 19 23 18446744073709551615 1 } 19 23 19 24 18446744073709551615 6 string 21 5 21 11 8 12 color_string 21 12 21 24 9 1 ( 21 24 21 25 9 1 ) 21 25 21 26 9 5 const 21 27 21 32 18446744073709551615 1 { 21 33 21 34 18446744073709551615 2 if 22 7 22 9 18446744073709551615 1 ( 22 10 22 11 18446744073709551615 5 color 22 11 22 16 6 2 == 22 17 22 19 18446744073709551615 5 Color 22 20 22 25 2 2 :: 22 25 22 27 18446744073709551615 5 WHITE 22 27 22 32 3 1 ) 22 32 22 33 18446744073709551615 6 return 23 9 23 15 18446744073709551615 7 "white" 23 16 23 23 18446744073709551615 1 ; 23 23 23 24 18446744073709551615 4 else 24 7 24 11 18446744073709551615 6 return 25 9 25 15 18446744073709551615 7 "black" 25 16 25 23 18446744073709551615 1 ; 25 23 25 24 18446744073709551615 1 } 26 5 26 6 18446744073709551615 44 /// Return color and type of the chess piece 28 5 28 49 18446744073709551615 7 virtual 29 5 29 12 18446744073709551615 6 string 29 13 29 19 8 4 type 29 20 29 24 10 1 ( 29 24 29 25 10 1 ) 29 25 29 26 10 5 const 29 27 29 32 18446744073709551615 1 = 29 33 29 34 10 1 0 29 35 29 36 18446744073709551615 1 ; 29 36 29 37 18446744073709551615 55 /// Returns true if the given chess piece move is valid 31 5 31 60 18446744073709551615 7 virtual 32 5 32 12 18446744073709551615 4 bool 32 13 32 17 18446744073709551615 10 valid_move 32 18 32 28 11 1 ( 32 28 32 29 11 3 int 32 29 32 32 18446744073709551615 6 from_x 32 33 32 39 12 1 , 32 39 32 40 11 3 int 32 41 32 44 18446744073709551615 6 from_y 32 45 32 51 13 1 , 32 51 32 52 11 3 int 32 53 32 56 18446744073709551615 4 to_x 32 57 32 61 14 1 , 32 61 32 62 11 3 int 32 63 32 66 18446744073709551615 4 to_y 32 67 32 71 15 1 ) 32 71 32 72 11 5 const 32 73 32 78 18446744073709551615 1 = 32 79 32 80 11 1 0 32 81 32 82 18446744073709551615 1 ; 32 82 32 83 18446744073709551615 7 virtual 34 5 34 12 18446744073709551615 6 string 34 13 34 19 8 9 shortName 34 20 34 29 16 1 ( 34 29 34 30 16 1 ) 34 30 34 31 16 5 const 34 32 34 37 18446744073709551615 1 = 34 38 34 39 16 1 0 34 40 34 41 18446744073709551615 1 ; 34 41 34 42 18446744073709551615 1 } 35 3 35 4 18446744073709551615 1 ; 35 4 35 5 18446744073709551615 5 class 37 3 37 8 18446744073709551615 4 King 37 9 37 13 17 1 : 37 14 37 15 18446744073709551615 6 public 37 16 37 22 18446744073709551615 5 Piece 37 23 37 28 5 1 { 37 29 37 30 18446744073709551615 6 public 38 3 38 9 18446744073709551615 1 : 38 9 38 10 18446744073709551615 4 King 39 5 39 9 17 1 ( 39 9 39 10 17 5 Color 39 10 39 15 2 5 color 39 16 39 21 18 1 ) 39 21 39 22 17 1 : 39 23 39 24 17 5 Piece 39 25 39 30 5 1 ( 39 30 39 31 5 5 color 39 31 39 36 18 1 ) 39 36 39 37 5 1 { 39 37 39 38 18446744073709551615 1 } 39 38 39 39 18446744073709551615 1 ; 39 39 39 40 18446744073709551615 1 ~ 40 5 40 6 18446744073709551615 4 King 40 6 40 10 17 1 ( 40 10 40 11 18446744073709551615 1 ) 40 11 40 12 18446744073709551615 1 { 40 12 40 13 18446744073709551615 1 } 40 13 40 14 18446744073709551615 1 ; 40 14 40 15 18446744073709551615 6 string 42 5 42 11 8 4 type 42 12 42 16 10 1 ( 42 16 42 17 10 1 ) 42 17 42 18 10 5 const 42 19 42 24 18446744073709551615 8 override 42 25 42 33 18446744073709551615 1 { 42 34 42 35 18446744073709551615 6 return 43 7 43 13 18446744073709551615 12 color_string 43 14 43 26 9 1 ( 43 26 43 27 9 1 ) 43 27 43 28 9 1 + 43 29 43 30 19 7 " king" 43 31 43 38 18446744073709551615 1 ; 43 38 43 39 18446744073709551615 1 } 44 5 44 6 18446744073709551615 4 bool 46 5 46 9 18446744073709551615 10 valid_move 46 10 46 20 11 1 ( 46 20 46 21 11 3 int 46 21 46 24 18446744073709551615 6 from_x 46 25 46 31 20 1 , 46 31 46 32 11 3 int 46 33 46 36 18446744073709551615 6 from_y 46 37 46 43 21 1 , 46 43 46 44 11 3 int 46 45 46 48 18446744073709551615 4 to_x 46 49 46 53 22 1 , 46 53 46 54 11 3 int 46 55 46 58 18446744073709551615 4 to_y 46 59 46 63 23 1 ) 46 63 46 64 11 5 const 46 65 46 70 18446744073709551615 8 override 46 71 46 79 18446744073709551615 1 { 46 80 46 81 18446744073709551615 6 return 47 7 47 13 18446744073709551615 1 ( 47 14 47 15 18446744073709551615 3 abs 47 15 47 18 24 1 ( 47 18 47 19 24 4 to_x 47 19 47 23 22 1 - 47 24 47 25 18446744073709551615 6 from_x 47 26 47 32 20 1 ) 47 32 47 33 24 2 <= 47 34 47 36 18446744073709551615 1 1 47 37 47 38 18446744073709551615 2 && 47 39 47 41 18446744073709551615 3 abs 47 42 47 45 24 1 ( 47 45 47 46 24 4 to_y 47 46 47 50 23 1 - 47 51 47 52 18446744073709551615 6 from_y 47 53 47 59 21 1 ) 47 59 47 60 24 2 <= 47 61 47 63 18446744073709551615 1 1 47 64 47 65 18446744073709551615 1 ) 47 65 47 66 18446744073709551615 1 ; 47 66 47 67 18446744073709551615 1 } 48 5 48 6 18446744073709551615 6 string 50 5 50 11 8 9 shortName 50 12 50 21 16 1 ( 50 21 50 22 16 1 ) 50 22 50 23 16 5 const 50 24 50 29 18446744073709551615 8 override 50 30 50 38 18446744073709551615 1 { 50 39 50 40 18446744073709551615 2 if 51 7 51 9 18446744073709551615 1 ( 51 10 51 11 18446744073709551615 12 color_string 51 11 51 23 9 1 ( 51 23 51 24 9 1 ) 51 24 51 25 9 2 == 51 26 51 28 25 7 "white" 51 29 51 36 18446744073709551615 1 ) 51 36 51 37 18446744073709551615 1 { 51 38 51 39 18446744073709551615 6 return 52 9 52 15 18446744073709551615 6 "W-Ki" 52 16 52 22 18446744073709551615 1 ; 52 22 52 23 18446744073709551615 1 } 53 7 53 8 18446744073709551615 4 else 53 9 53 13 18446744073709551615 1 { 53 14 53 15 18446744073709551615 6 return 54 9 54 15 18446744073709551615 6 "B-Ki" 54 16 54 22 18446744073709551615 1 ; 54 22 54 23 18446744073709551615 1 } 55 7 55 8 18446744073709551615 1 } 56 5 56 6 18446744073709551615 1 } 57 3 57 4 18446744073709551615 1 ; 57 4 57 5 18446744073709551615 5 class 59 3 59 8 18446744073709551615 6 Knight 59 9 59 15 26 1 : 59 16 59 17 18446744073709551615 6 public 59 18 59 24 18446744073709551615 5 Piece 59 25 59 30 5 1 { 59 31 59 32 18446744073709551615 6 public 60 3 60 9 18446744073709551615 1 : 60 9 60 10 18446744073709551615 6 Knight 61 5 61 11 26 1 ( 61 11 61 12 26 5 Color 61 12 61 17 2 5 color 61 18 61 23 27 1 ) 61 23 61 24 26 1 : 61 25 61 26 26 5 Piece 61 27 61 32 5 1 ( 61 32 61 33 5 5 color 61 33 61 38 27 1 ) 61 38 61 39 5 1 { 61 39 61 40 18446744073709551615 1 } 61 40 61 41 18446744073709551615 1 ; 61 41 61 42 18446744073709551615 1 ~ 62 5 62 6 18446744073709551615 6 Knight 62 6 62 12 26 1 ( 62 12 62 13 18446744073709551615 1 ) 62 13 62 14 18446744073709551615 1 { 62 14 62 15 18446744073709551615 1 } 62 15 62 16 18446744073709551615 1 ; 62 16 62 17 18446744073709551615 6 string 64 5 64 11 8 4 type 64 12 64 16 10 1 ( 64 16 64 17 10 1 ) 64 17 64 18 10 5 const 64 19 64 24 18446744073709551615 8 override 64 25 64 33 18446744073709551615 1 { 64 34 64 35 18446744073709551615 6 return 65 7 65 13 18446744073709551615 12 color_string 65 14 65 26 9 1 ( 65 26 65 27 9 1 ) 65 27 65 28 9 1 + 65 29 65 30 19 9 " knight" 65 31 65 40 18446744073709551615 1 ; 65 40 65 41 18446744073709551615 1 } 66 5 66 6 18446744073709551615 4 bool 68 5 68 9 18446744073709551615 10 valid_move 68 10 68 20 11 1 ( 68 20 68 21 11 3 int 68 21 68 24 18446744073709551615 6 from_x 68 25 68 31 28 1 , 68 31 68 32 11 3 int 68 33 68 36 18446744073709551615 6 from_y 68 37 68 43 29 1 , 68 43 68 44 11 3 int 68 45 68 48 18446744073709551615 4 to_x 68 49 68 53 30 1 , 68 53 68 54 11 3 int 68 55 68 58 18446744073709551615 4 to_y 68 59 68 63 31 1 ) 68 63 68 64 11 5 const 68 65 68 70 18446744073709551615 8 override 68 71 68 79 18446744073709551615 1 { 68 80 68 81 18446744073709551615 2 if 69 7 69 9 18446744073709551615 1 ( 69 10 69 11 18446744073709551615 1 ( 69 11 69 12 18446744073709551615 3 abs 69 12 69 15 24 1 ( 69 15 69 16 24 4 to_x 69 16 69 20 30 1 - 69 21 69 22 18446744073709551615 6 from_x 69 23 69 29 28 1 ) 69 29 69 30 24 2 == 69 31 69 33 18446744073709551615 1 2 69 34 69 35 18446744073709551615 2 && 69 36 69 38 18446744073709551615 3 abs 69 39 69 42 24 1 ( 69 42 69 43 24 4 to_y 69 43 69 47 31 1 - 69 48 69 49 18446744073709551615 6 from_y 69 50 69 56 29 1 ) 69 56 69 57 24 2 == 69 58 69 60 18446744073709551615 1 1 69 61 69 62 18446744073709551615 1 ) 69 62 69 63 18446744073709551615 2 || 69 64 69 66 18446744073709551615 1 ( 69 67 69 68 18446744073709551615 3 abs 69 68 69 71 24 1 ( 69 71 69 72 24 4 to_x 69 72 69 76 30 1 - 69 77 69 78 18446744073709551615 6 from_x 69 79 69 85 28 1 ) 69 85 69 86 24 2 == 69 87 69 89 18446744073709551615 1 1 69 90 69 91 18446744073709551615 2 && 69 92 69 94 18446744073709551615 3 abs 69 95 69 98 24 1 ( 69 98 69 99 24 4 to_y 69 99 69 103 31 1 - 69 104 69 105 18446744073709551615 6 from_y 69 106 69 112 29 1 ) 69 112 69 113 24 2 == 69 114 69 116 18446744073709551615 1 2 69 117 69 118 18446744073709551615 1 ) 69 118 69 119 18446744073709551615 1 ) 69 119 69 120 18446744073709551615 1 { 69 121 69 122 18446744073709551615 6 return 70 9 70 15 18446744073709551615 4 true 70 16 70 20 18446744073709551615 1 ; 70 20 70 21 18446744073709551615 1 } 71 7 71 8 18446744073709551615 4 else 71 9 71 13 18446744073709551615 1 { 71 14 71 15 18446744073709551615 6 return 72 9 72 15 18446744073709551615 5 false 72 16 72 21 18446744073709551615 1 ; 72 21 72 22 18446744073709551615 1 } 73 7 73 8 18446744073709551615 1 } 74 5 74 6 18446744073709551615 6 string 76 5 76 11 8 9 shortName 76 12 76 21 16 1 ( 76 21 76 22 16 1 ) 76 22 76 23 16 5 const 76 24 76 29 18446744073709551615 8 override 76 30 76 38 18446744073709551615 1 { 76 39 76 40 18446744073709551615 2 if 77 7 77 9 18446744073709551615 1 ( 77 10 77 11 18446744073709551615 12 color_string 77 11 77 23 9 1 ( 77 23 77 24 9 1 ) 77 24 77 25 9 2 == 77 26 77 28 25 7 "white" 77 29 77 36 18446744073709551615 1 ) 77 36 77 37 18446744073709551615 1 { 77 38 77 39 18446744073709551615 6 return 78 9 78 15 18446744073709551615 6 "W-Kn" 78 16 78 22 18446744073709551615 1 ; 78 22 78 23 18446744073709551615 1 } 79 7 79 8 18446744073709551615 4 else 79 9 79 13 18446744073709551615 1 { 79 14 79 15 18446744073709551615 6 return 80 9 80 15 18446744073709551615 6 "B-Kn" 80 16 80 22 18446744073709551615 1 ; 80 22 80 23 18446744073709551615 1 } 81 7 81 8 18446744073709551615 1 } 82 5 82 6 18446744073709551615 1 } 83 3 83 4 18446744073709551615 1 ; 83 4 83 5 18446744073709551615 10 ChessBoard 85 3 85 13 1 1 ( 85 13 85 14 1 1 ) 85 14 85 15 1 1 { 85 16 85 17 18446744073709551615 57 // Initialize the squares stored in 8 columns and 8 rows: 86 5 86 62 18446744073709551615 7 squares 87 5 87 12 32 1 . 87 12 87 13 33 6 resize 87 13 87 19 33 1 ( 87 19 87 20 33 1 8 87 20 87 21 18446744073709551615 1 ) 87 21 87 22 33 1 ; 87 22 87 23 18446744073709551615 3 for 88 5 88 8 18446744073709551615 1 ( 88 9 88 10 18446744073709551615 4 auto 88 10 88 14 18446744073709551615 1 & 88 15 88 16 18446744073709551615 13 square_column 88 16 88 29 34 1 : 88 30 88 31 35 7 squares 88 32 88 39 32 1 ) 88 39 88 40 18446744073709551615 13 square_column 89 7 89 20 34 1 . 89 20 89 21 33 6 resize 89 21 89 27 33 1 ( 89 27 89 28 33 1 8 89 28 89 29 18446744073709551615 1 ) 89 29 89 30 33 1 ; 89 30 89 31 18446744073709551615 1 } 90 3 90 4 18446744073709551615 47 /// 8x8 squares occupied by 1 or 0 chess pieces 92 3 92 50 18446744073709551615 6 vector 93 3 93 9 36 1 < 93 9 93 10 18446744073709551615 6 vector 93 10 93 16 36 1 < 93 16 93 17 18446744073709551615 10 unique_ptr 93 17 93 27 37 1 < 93 27 93 28 18446744073709551615 5 Piece 93 28 93 33 5 2 >> 93 33 93 35 18446744073709551615 1 > 93 35 93 36 18446744073709551615 7 squares 93 37 93 44 32 1 ; 93 44 93 45 18446744073709551615 45 /// Move a chess piece if it is a valid move. 95 3 95 48 18446744073709551615 41 /// Does not test for check or checkmate. 96 3 96 44 18446744073709551615 4 bool 97 3 97 7 18446744073709551615 10 move_piece 97 8 97 18 38 1 ( 97 18 97 19 38 5 const 97 19 97 24 18446744073709551615 3 std 97 25 97 28 0 2 :: 97 28 97 30 18446744073709551615 6 string 97 30 97 36 8 1 & 97 37 97 38 18446744073709551615 4 from 97 38 97 42 39 1 , 97 42 97 43 38 5 const 97 44 97 49 18446744073709551615 3 std 97 50 97 53 0 2 :: 97 53 97 55 18446744073709551615 6 string 97 55 97 61 8 1 & 97 62 97 63 18446744073709551615 2 to 97 63 97 65 40 1 ) 97 65 97 66 38 1 { 97 67 97 68 18446744073709551615 3 int 98 5 98 8 18446744073709551615 6 from_x 98 9 98 15 41 1 = 98 16 98 17 18446744073709551615 4 from 98 18 98 22 39 1 [ 98 22 98 23 42 1 0 98 23 98 24 18446744073709551615 1 ] 98 24 98 25 42 1 - 98 26 98 27 18446744073709551615 3 'a' 98 28 98 31 18446744073709551615 1 ; 98 31 98 32 18446744073709551615 3 int 99 5 99 8 18446744073709551615 6 from_y 99 9 99 15 43 1 = 99 16 99 17 18446744073709551615 4 stoi 99 18 99 22 44 1 ( 99 22 99 23 44 6 string 99 23 99 29 8 1 ( 99 29 99 30 45 1 ) 99 30 99 31 45 1 + 99 32 99 33 19 4 from 99 34 99 38 39 1 [ 99 38 99 39 42 1 1 99 39 99 40 18446744073709551615 1 ] 99 40 99 41 42 1 ) 99 41 99 42 44 1 - 99 43 99 44 18446744073709551615 1 1 99 45 99 46 18446744073709551615 1 ; 99 46 99 47 18446744073709551615 3 int 100 5 100 8 18446744073709551615 4 to_x 100 9 100 13 46 1 = 100 14 100 15 18446744073709551615 2 to 100 16 100 18 40 1 [ 100 18 100 19 42 1 0 100 19 100 20 18446744073709551615 1 ] 100 20 100 21 42 1 - 100 22 100 23 18446744073709551615 3 'a' 100 24 100 27 18446744073709551615 1 ; 100 27 100 28 18446744073709551615 3 int 101 5 101 8 18446744073709551615 4 to_y 101 9 101 13 47 1 = 101 14 101 15 18446744073709551615 4 stoi 101 16 101 20 44 1 ( 101 20 101 21 44 6 string 101 21 101 27 8 1 ( 101 27 101 28 45 1 ) 101 28 101 29 45 1 + 101 30 101 31 19 2 to 101 32 101 34 40 1 [ 101 34 101 35 42 1 1 101 35 101 36 18446744073709551615 1 ] 101 36 101 37 42 1 ) 101 37 101 38 44 1 - 101 39 101 40 18446744073709551615 1 1 101 41 101 42 18446744073709551615 1 ; 101 42 101 43 18446744073709551615 4 auto 103 5 103 9 18446744073709551615 1 & 103 10 103 11 18446744073709551615 10 piece_from 103 11 103 21 48 1 = 103 22 103 23 18446744073709551615 7 squares 103 24 103 31 32 1 [ 103 31 103 32 49 6 from_x 103 32 103 38 41 1 ] 103 38 103 39 49 1 [ 103 39 103 40 49 6 from_y 103 40 103 46 43 1 ] 103 46 103 47 49 1 ; 103 47 103 48 18446744073709551615 2 if 104 5 104 7 18446744073709551615 1 ( 104 8 104 9 18446744073709551615 10 piece_from 104 9 104 19 48 1 ) 104 19 104 20 18446744073709551615 1 { 104 21 104 22 18446744073709551615 2 if 105 7 105 9 18446744073709551615 1 ( 105 10 105 11 18446744073709551615 10 piece_from 105 11 105 21 48 2 -> 105 21 105 23 11 10 valid_move 105 23 105 33 11 1 ( 105 33 105 34 11 6 from_x 105 34 105 40 41 1 , 105 40 105 41 11 6 from_y 105 42 105 48 43 1 , 105 48 105 49 11 4 to_x 105 50 105 54 46 1 , 105 54 105 55 11 4 to_y 105 56 105 60 47 1 ) 105 60 105 61 11 1 ) 105 61 105 62 18446744073709551615 1 { 105 63 105 64 18446744073709551615 4 cout 106 9 106 13 50 2 << 106 14 106 16 51 10 piece_from 106 17 106 27 48 2 -> 106 27 106 29 10 4 type 106 29 106 33 10 1 ( 106 33 106 34 10 1 ) 106 34 106 35 10 2 << 106 36 106 38 51 18 " is moving from " 106 39 106 57 18446744073709551615 2 << 106 58 106 60 51 4 from 106 61 106 65 39 2 << 106 66 106 68 51 6 " to " 106 69 106 75 18446744073709551615 2 << 106 76 106 78 51 2 to 106 79 106 81 40 2 << 106 82 106 84 52 4 endl 106 85 106 89 53 1 ; 106 89 106 90 18446744073709551615 4 auto 107 9 107 13 18446744073709551615 1 & 107 14 107 15 18446744073709551615 8 piece_to 107 15 107 23 54 1 = 107 24 107 25 18446744073709551615 7 squares 107 26 107 33 32 1 [ 107 33 107 34 49 4 to_x 107 34 107 38 46 1 ] 107 38 107 39 49 1 [ 107 39 107 40 49 4 to_y 107 40 107 44 47 1 ] 107 44 107 45 49 1 ; 107 45 107 46 18446744073709551615 2 if 108 9 108 11 18446744073709551615 1 ( 108 12 108 13 18446744073709551615 8 piece_to 108 13 108 21 54 1 ) 108 21 108 22 18446744073709551615 1 { 108 23 108 24 18446744073709551615 2 if 109 11 109 13 18446744073709551615 1 ( 109 14 109 15 18446744073709551615 10 piece_from 109 15 109 25 48 2 -> 109 25 109 27 18446744073709551615 5 color 109 27 109 32 6 2 != 109 33 109 35 18446744073709551615 8 piece_to 109 36 109 44 54 2 -> 109 44 109 46 18446744073709551615 5 color 109 46 109 51 6 1 ) 109 51 109 52 18446744073709551615 1 { 109 53 109 54 18446744073709551615 4 cout 110 13 110 17 50 2 << 110 18 110 20 51 8 piece_to 110 21 110 29 54 2 -> 110 29 110 31 10 4 type 110 31 110 35 10 1 ( 110 35 110 36 10 1 ) 110 36 110 37 10 2 << 110 38 110 40 51 25 " is being removed from " 110 41 110 66 18446744073709551615 2 << 110 67 110 69 51 2 to 110 70 110 72 40 2 << 110 73 110 75 52 4 endl 110 76 110 80 53 1 ; 110 80 110 81 18446744073709551615 2 if 111 13 111 15 18446744073709551615 1 ( 111 16 111 17 18446744073709551615 4 auto 111 17 111 21 18446744073709551615 4 king 111 22 111 26 55 1 = 111 27 111 28 18446744073709551615 12 dynamic_cast 111 29 111 41 18446744073709551615 1 < 111 41 111 42 18446744073709551615 4 King 111 42 111 46 17 1 * 111 47 111 48 18446744073709551615 1 > 111 48 111 49 18446744073709551615 1 ( 111 49 111 50 18446744073709551615 8 piece_to 111 50 111 58 54 1 . 111 58 111 59 56 3 get 111 59 111 62 56 1 ( 111 62 111 63 56 1 ) 111 63 111 64 56 1 ) 111 64 111 65 18446744073709551615 1 ) 111 65 111 66 18446744073709551615 4 cout 112 15 112 19 50 2 << 112 20 112 22 51 4 king 112 23 112 27 55 2 -> 112 27 112 29 9 12 color_string 112 29 112 41 9 1 ( 112 41 112 42 9 1 ) 112 42 112 43 9 2 << 112 44 112 46 51 16 " lost the game" 112 47 112 63 18446744073709551615 2 << 112 64 112 66 52 4 endl 112 67 112 71 53 1 ; 112 71 112 72 18446744073709551615 1 } 113 11 113 12 18446744073709551615 4 else 113 13 113 17 18446744073709551615 1 { 113 18 113 19 18446744073709551615 76 // piece in the from square has the same color as the piece in the to square 114 13 114 89 18446744073709551615 4 cout 115 13 115 17 50 2 << 115 18 115 20 51 15 "can not move " 115 21 115 36 18446744073709551615 2 << 115 37 115 39 51 10 piece_from 115 40 115 50 48 2 -> 115 50 115 52 10 4 type 115 52 115 56 10 1 ( 115 56 115 57 10 1 ) 115 57 115 58 10 2 << 115 59 115 61 51 8 " from " 115 62 115 70 18446744073709551615 2 << 115 71 115 73 51 4 from 115 74 115 78 39 2 << 115 79 115 81 51 6 " to " 115 82 115 88 18446744073709551615 2 << 115 89 115 91 51 2 to 115 92 115 94 40 2 << 115 95 115 97 52 4 endl 115 98 115 102 53 1 ; 115 102 115 103 18446744073709551615 6 return 116 13 116 19 18446744073709551615 5 false 116 20 116 25 18446744073709551615 1 ; 116 25 116 26 18446744073709551615 1 } 117 11 117 12 18446744073709551615 1 } 118 9 118 10 18446744073709551615 8 piece_to 119 9 119 17 54 1 = 119 18 119 19 57 4 move 119 20 119 24 58 1 ( 119 24 119 25 58 10 piece_from 119 25 119 35 48 1 ) 119 35 119 36 58 1 ; 119 36 119 37 18446744073709551615 10 printBoard 120 9 120 19 59 1 ( 120 19 120 20 59 1 ) 120 20 120 21 59 1 ; 120 21 120 22 18446744073709551615 6 return 121 9 121 15 18446744073709551615 4 true 121 16 121 20 18446744073709551615 1 ; 121 20 121 21 18446744073709551615 1 } 122 7 122 8 18446744073709551615 4 else 122 9 122 13 18446744073709551615 1 { 122 14 122 15 18446744073709551615 4 cout 123 9 123 13 50 2 << 123 14 123 16 51 15 "can not move " 123 17 123 32 18446744073709551615 2 << 123 33 123 35 51 10 piece_from 123 36 123 46 48 2 -> 123 46 123 48 10 4 type 123 48 123 52 10 1 ( 123 52 123 53 10 1 ) 123 53 123 54 10 2 << 123 55 123 57 51 8 " from " 123 58 123 66 18446744073709551615 2 << 123 67 123 69 51 4 from 123 70 123 74 39 2 << 123 75 123 77 51 6 " to " 123 78 123 84 18446744073709551615 2 << 123 85 123 87 51 2 to 123 88 123 90 40 2 << 123 91 123 93 52 4 endl 123 94 123 98 53 1 ; 123 98 123 99 18446744073709551615 6 return 124 9 124 15 18446744073709551615 5 false 124 16 124 21 18446744073709551615 1 ; 124 21 124 22 18446744073709551615 1 } 125 7 125 8 18446744073709551615 1 } 126 5 126 6 18446744073709551615 4 else 126 7 126 11 18446744073709551615 1 { 126 12 126 13 18446744073709551615 4 cout 127 7 127 11 50 2 << 127 12 127 14 51 14 "no piece at " 127 15 127 29 18446744073709551615 2 << 127 30 127 32 51 4 from 127 33 127 37 39 2 << 127 38 127 40 52 4 endl 127 41 127 45 53 1 ; 127 45 127 46 18446744073709551615 6 return 128 7 128 13 18446744073709551615 5 false 128 14 128 19 18446744073709551615 1 ; 128 19 128 20 18446744073709551615 1 } 129 5 129 6 18446744073709551615 1 } 130 3 130 4 18446744073709551615 4 void 132 3 132 7 18446744073709551615 10 printBoard 132 8 132 18 59 1 ( 132 18 132 19 59 1 ) 132 19 132 20 59 1 { 132 21 132 22 18446744073709551615 3 for 134 5 134 8 18446744073709551615 1 ( 134 9 134 10 18446744073709551615 3 int 134 10 134 13 18446744073709551615 1 i 134 14 134 15 60 1 = 134 16 134 17 18446744073709551615 1 0 134 18 134 19 18446744073709551615 1 ; 134 19 134 20 18446744073709551615 1 i 134 21 134 22 60 1 < 134 23 134 24 18446744073709551615 1 8 134 25 134 26 18446744073709551615 1 ; 134 26 134 27 18446744073709551615 1 i 134 28 134 29 60 2 ++ 134 29 134 31 18446744073709551615 1 ) 134 31 134 32 18446744073709551615 1 { 134 33 134 34 18446744073709551615 4 cout 135 7 135 11 50 2 << 135 12 135 14 51 44 "------------------------------------------" 135 15 135 59 18446744073709551615 2 << 135 60 135 62 52 4 endl 135 63 135 67 53 1 ; 135 67 135 68 18446744073709551615 3 for 136 7 136 10 18446744073709551615 1 ( 136 11 136 12 18446744073709551615 3 int 136 12 136 15 18446744073709551615 1 j 136 16 136 17 61 1 = 136 18 136 19 18446744073709551615 1 0 136 20 136 21 18446744073709551615 1 ; 136 21 136 22 18446744073709551615 1 j 136 23 136 24 61 1 < 136 25 136 26 18446744073709551615 1 8 136 27 136 28 18446744073709551615 1 ; 136 28 136 29 18446744073709551615 1 j 136 30 136 31 61 2 ++ 136 31 136 33 18446744073709551615 1 ) 136 33 136 34 18446744073709551615 1 { 136 35 136 36 18446744073709551615 4 cout 137 9 137 13 50 2 << 137 14 137 16 51 3 "|" 137 17 137 20 18446744073709551615 1 ; 137 20 137 21 18446744073709551615 4 auto 138 9 138 13 18446744073709551615 1 & 138 14 138 15 18446744073709551615 10 piece_from 138 15 138 25 62 1 = 138 26 138 27 18446744073709551615 7 squares 138 28 138 35 32 1 [ 138 35 138 36 49 1 j 138 36 138 37 61 1 ] 138 37 138 38 49 1 [ 138 38 138 39 49 1 i 138 39 138 40 60 1 ] 138 40 138 41 49 1 ; 138 41 138 42 18446744073709551615 2 if 139 9 139 11 18446744073709551615 1 ( 139 12 139 13 18446744073709551615 10 piece_from 139 13 139 23 62 1 ) 139 23 139 24 18446744073709551615 1 { 139 25 139 26 18446744073709551615 4 cout 140 11 140 15 50 2 << 140 16 140 18 51 10 piece_from 140 19 140 29 62 2 -> 140 29 140 31 16 9 shortName 140 31 140 40 16 1 ( 140 40 140 41 16 1 ) 140 41 140 42 16 1 ; 140 42 140 43 18446744073709551615 1 } 141 9 141 10 18446744073709551615 4 else 141 11 141 15 18446744073709551615 1 { 141 16 141 17 18446744073709551615 4 cout 142 11 142 15 50 2 << 142 16 142 18 51 6 "    " 142 19 142 25 18446744073709551615 1 ; 142 25 142 26 18446744073709551615 1 } 143 9 143 10 18446744073709551615 1 } 144 7 144 8 18446744073709551615 4 cout 145 7 145 11 50 2 << 145 12 145 14 51 3 "|" 145 15 145 18 18446744073709551615 2 << 145 19 145 21 52 4 endl 145 22 145 26 53 1 ; 145 26 145 27 18446744073709551615 1 } 146 5 146 6 18446744073709551615 4 cout 147 5 147 9 50 2 << 147 10 147 12 51 44 "------------------------------------------" 147 13 147 57 18446744073709551615 2 << 147 58 147 60 52 4 endl 147 61 147 65 53 2 << 147 66 147 68 52 4 endl 147 69 147 73 53 1 ; 147 73 147 74 18446744073709551615 1 } 148 5 148 6 18446744073709551615 1 } 149 1 149 2 18446744073709551615 1 ; 149 2 149 3 18446744073709551615 3 int 151 1 151 4 18446744073709551615 4 main 151 5 151 9 63 1 ( 151 9 151 10 63 1 ) 151 10 151 11 63 1 { 151 12 151 13 18446744073709551615 10 ChessBoard 152 3 152 13 1 5 board 152 14 152 19 64 1 ; 152 19 152 20 18446744073709551615 5 board 154 3 154 8 64 1 . 154 8 154 9 18446744073709551615 7 squares 154 9 154 16 32 1 [ 154 16 154 17 49 1 4 154 17 154 18 18446744073709551615 1 ] 154 18 154 19 49 1 [ 154 19 154 20 49 1 0 154 20 154 21 18446744073709551615 1 ] 154 21 154 22 49 1 = 154 23 154 24 57 11 make_unique 154 25 154 36 65 1 < 154 36 154 37 65 10 ChessBoard 154 37 154 47 1 2 :: 154 47 154 49 65 4 King 154 49 154 53 17 1 > 154 53 154 54 65 1 ( 154 54 154 55 65 10 ChessBoard 154 55 154 65 1 2 :: 154 65 154 67 18446744073709551615 5 Color 154 67 154 72 2 2 :: 154 72 154 74 18446744073709551615 5 WHITE 154 74 154 79 3 1 ) 154 79 154 80 65 1 ; 154 80 154 81 18446744073709551615 5 board 155 3 155 8 64 1 . 155 8 155 9 18446744073709551615 7 squares 155 9 155 16 32 1 [ 155 16 155 17 49 1 1 155 17 155 18 18446744073709551615 1 ] 155 18 155 19 49 1 [ 155 19 155 20 49 1 0 155 20 155 21 18446744073709551615 1 ] 155 21 155 22 49 1 = 155 23 155 24 57 11 make_unique 155 25 155 36 65 1 < 155 36 155 37 65 10 ChessBoard 155 37 155 47 1 2 :: 155 47 155 49 65 6 Knight 155 49 155 55 26 1 > 155 55 155 56 65 1 ( 155 56 155 57 65 10 ChessBoard 155 57 155 67 1 2 :: 155 67 155 69 18446744073709551615 5 Color 155 69 155 74 2 2 :: 155 74 155 76 18446744073709551615 5 WHITE 155 76 155 81 3 1 ) 155 81 155 82 65 1 ; 155 82 155 83 18446744073709551615 5 board 156 3 156 8 64 1 . 156 8 156 9 18446744073709551615 7 squares 156 9 156 16 32 1 [ 156 16 156 17 49 1 6 156 17 156 18 18446744073709551615 1 ] 156 18 156 19 49 1 [ 156 19 156 20 49 1 0 156 20 156 21 18446744073709551615 1 ] 156 21 156 22 49 1 = 156 23 156 24 57 11 make_unique 156 25 156 36 65 1 < 156 36 156 37 65 10 ChessBoard 156 37 156 47 1 2 :: 156 47 156 49 65 6 Knight 156 49 156 55 26 1 > 156 55 156 56 65 1 ( 156 56 156 57 65 10 ChessBoard 156 57 156 67 1 2 :: 156 67 156 69 18446744073709551615 5 Color 156 69 156 74 2 2 :: 156 74 156 76 18446744073709551615 5 WHITE 156 76 156 81 3 1 ) 156 81 156 82 65 1 ; 156 82 156 83 18446744073709551615 5 board 158 3 158 8 64 1 . 158 8 158 9 18446744073709551615 7 squares 158 9 158 16 32 1 [ 158 16 158 17 49 1 4 158 17 158 18 18446744073709551615 1 ] 158 18 158 19 49 1 [ 158 19 158 20 49 1 7 158 20 158 21 18446744073709551615 1 ] 158 21 158 22 49 1 = 158 23 158 24 57 11 make_unique 158 25 158 36 65 1 < 158 36 158 37 65 10 ChessBoard 158 37 158 47 1 2 :: 158 47 158 49 65 4 King 158 49 158 53 17 1 > 158 53 158 54 65 1 ( 158 54 158 55 65 10 ChessBoard 158 55 158 65 1 2 :: 158 65 158 67 18446744073709551615 5 Color 158 67 158 72 2 2 :: 158 72 158 74 18446744073709551615 5 BLACK 158 74 158 79 4 1 ) 158 79 158 80 65 1 ; 158 80 158 81 18446744073709551615 5 board 159 3 159 8 64 1 . 159 8 159 9 18446744073709551615 7 squares 159 9 159 16 32 1 [ 159 16 159 17 49 1 1 159 17 159 18 18446744073709551615 1 ] 159 18 159 19 49 1 [ 159 19 159 20 49 1 7 159 20 159 21 18446744073709551615 1 ] 159 21 159 22 49 1 = 159 23 159 24 57 11 make_unique 159 25 159 36 65 1 < 159 36 159 37 65 10 ChessBoard 159 37 159 47 1 2 :: 159 47 159 49 65 6 Knight 159 49 159 55 26 1 > 159 55 159 56 65 1 ( 159 56 159 57 65 10 ChessBoard 159 57 159 67 1 2 :: 159 67 159 69 18446744073709551615 5 Color 159 69 159 74 2 2 :: 159 74 159 76 18446744073709551615 5 BLACK 159 76 159 81 4 1 ) 159 81 159 82 65 1 ; 159 82 159 83 18446744073709551615 5 board 160 3 160 8 64 1 . 160 8 160 9 18446744073709551615 7 squares 160 9 160 16 32 1 [ 160 16 160 17 49 1 6 160 17 160 18 18446744073709551615 1 ] 160 18 160 19 49 1 [ 160 19 160 20 49 1 7 160 20 160 21 18446744073709551615 1 ] 160 21 160 22 49 1 = 160 23 160 24 57 11 make_unique 160 25 160 36 65 1 < 160 36 160 37 65 10 ChessBoard 160 37 160 47 1 2 :: 160 47 160 49 65 6 Knight 160 49 160 55 26 1 > 160 55 160 56 65 1 ( 160 56 160 57 65 10 ChessBoard 160 57 160 67 1 2 :: 160 67 160 69 18446744073709551615 5 Color 160 69 160 74 2 2 :: 160 74 160 76 18446744073709551615 5 BLACK 160 76 160 81 4 1 ) 160 81 160 82 65 1 ; 160 82 160 83 18446744073709551615 4 cout 162 3 162 7 50 2 << 162 8 162 10 51 16 "Invalid moves:" 162 11 162 27 18446744073709551615 2 << 162 28 162 30 52 4 endl 162 31 162 35 53 1 ; 162 35 162 36 18446744073709551615 5 board 163 3 163 8 64 1 . 163 8 163 9 38 10 move_piece 163 9 163 19 38 1 ( 163 19 163 20 38 4 "e3" 163 20 163 24 18446744073709551615 1 , 163 24 163 25 38 4 "e2" 163 26 163 30 18446744073709551615 1 ) 163 30 163 31 38 1 ; 163 31 163 32 18446744073709551615 5 board 164 3 164 8 64 1 . 164 8 164 9 38 10 move_piece 164 9 164 19 38 1 ( 164 19 164 20 38 4 "e1" 164 20 164 24 18446744073709551615 1 , 164 24 164 25 38 4 "e3" 164 26 164 30 18446744073709551615 1 ) 164 30 164 31 38 1 ; 164 31 164 32 18446744073709551615 5 board 165 3 165 8 64 1 . 165 8 165 9 38 10 move_piece 165 9 165 19 38 1 ( 165 19 165 20 38 4 "b1" 165 20 165 24 18446744073709551615 1 , 165 24 165 25 38 4 "b2" 165 26 165 30 18446744073709551615 1 ) 165 30 165 31 38 1 ; 165 31 165 32 18446744073709551615 4 cout 166 3 166 7 50 2 << 166 8 166 10 52 4 endl 166 11 166 15 53 1 ; 166 15 166 16 18446744073709551615 4 cout 168 3 168 7 50 2 << 168 8 168 10 51 19 "A simulated game:" 168 11 168 30 18446744073709551615 2 << 168 31 168 33 52 4 endl 168 34 168 38 53 1 ; 168 38 168 39 18446744073709551615 5 board 169 3 169 8 64 1 . 169 8 169 9 38 10 move_piece 169 9 169 19 38 1 ( 169 19 169 20 38 4 "e1" 169 20 169 24 18446744073709551615 1 , 169 24 169 25 38 4 "e2" 169 26 169 30 18446744073709551615 1 ) 169 30 169 31 38 1 ; 169 31 169 32 18446744073709551615 5 board 170 3 170 8 64 1 . 170 8 170 9 38 10 move_piece 170 9 170 19 38 1 ( 170 19 170 20 38 4 "g8" 170 20 170 24 18446744073709551615 1 , 170 24 170 25 38 4 "h6" 170 26 170 30 18446744073709551615 1 ) 170 30 170 31 38 1 ; 170 31 170 32 18446744073709551615 5 board 171 3 171 8 64 1 . 171 8 171 9 38 10 move_piece 171 9 171 19 38 1 ( 171 19 171 20 38 4 "b1" 171 20 171 24 18446744073709551615 1 , 171 24 171 25 38 4 "c3" 171 26 171 30 18446744073709551615 1 ) 171 30 171 31 38 1 ; 171 31 171 32 18446744073709551615 5 board 172 3 172 8 64 1 . 172 8 172 9 38 10 move_piece 172 9 172 19 38 1 ( 172 19 172 20 38 4 "h6" 172 20 172 24 18446744073709551615 1 , 172 24 172 25 38 4 "g8" 172 26 172 30 18446744073709551615 1 ) 172 30 172 31 38 1 ; 172 31 172 32 18446744073709551615 5 board 173 3 173 8 64 1 . 173 8 173 9 38 10 move_piece 173 9 173 19 38 1 ( 173 19 173 20 38 4 "c3" 173 20 173 24 18446744073709551615 1 , 173 24 173 25 38 4 "d5" 173 26 173 30 18446744073709551615 1 ) 173 30 173 31 38 1 ; 173 31 173 32 18446744073709551615 5 board 174 3 174 8 64 1 . 174 8 174 9 38 10 move_piece 174 9 174 19 38 1 ( 174 19 174 20 38 4 "g8" 174 20 174 24 18446744073709551615 1 , 174 24 174 25 38 4 "h6" 174 26 174 30 18446744073709551615 1 ) 174 30 174 31 38 1 ; 174 31 174 32 18446744073709551615 5 board 175 3 175 8 64 1 . 175 8 175 9 38 10 move_piece 175 9 175 19 38 1 ( 175 19 175 20 38 4 "d5" 175 20 175 24 18446744073709551615 1 , 175 24 175 25 38 4 "f6" 175 26 175 30 18446744073709551615 1 ) 175 30 175 31 38 1 ; 175 31 175 32 18446744073709551615 5 board 176 3 176 8 64 1 . 176 8 176 9 38 10 move_piece 176 9 176 19 38 1 ( 176 19 176 20 38 4 "h6" 176 20 176 24 18446744073709551615 1 , 176 24 176 25 38 4 "g8" 176 26 176 30 18446744073709551615 1 ) 176 30 176 31 38 1 ; 176 31 176 32 18446744073709551615 5 board 177 3 177 8 64 1 . 177 8 177 9 38 10 move_piece 177 9 177 19 38 1 ( 177 19 177 20 38 4 "f6" 177 20 177 24 18446744073709551615 1 , 177 24 177 25 38 4 "e8" 177 26 177 30 18446744073709551615 1 ) 177 30 177 31 38 1 ; 177 31 177 32 18446744073709551615 1 } 178 1 178 2 18446744073709551615 0 0 66 0 0 0 22 0 0 1 2 0 3 std 4 1 2 0 10 ChessBoard 5 1 2 0 16 Color:ChessBoard 7 1 2 0 22 WHITE:Color:ChessBoard 7 1 2 0 22 BLACK:Color:ChessBoard 4 1 2 0 16 Piece:ChessBoard 6 1 2 0 22 color:Piece:ChessBoard 10 1 2 0 74 18:17:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 20 1 2 0 14 string:__1:std 21 1 2 0 29 color_string:Piece:ChessBoard 21 1 2 0 21 type:Piece:ChessBoard 21 1 2 0 27 valid_move:Piece:ChessBoard 10 1 2 0 74 32:33:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 10 1 2 0 74 32:45:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 10 1 2 0 74 32:57:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 10 1 2 0 74 32:67:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 21 1 2 0 26 shortName:Piece:ChessBoard 4 1 2 0 15 King:ChessBoard 10 1 2 0 74 39:16:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 8 1 2 0 17 operator+:__1:std 10 1 2 0 74 46:25:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 10 1 2 0 74 46:37:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 10 1 2 0 74 46:49:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 10 1 2 0 74 46:59:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 8 1 2 0 3 abs 8 1 2 0 18 operator==:__1:std 4 1 2 0 17 Knight:ChessBoard 10 1 2 0 74 61:18:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 10 1 2 0 74 68:25:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 10 1 2 0 74 68:37:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 10 1 2 0 74 68:49:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 10 1 2 0 74 68:59:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 6 1 2 0 18 squares:ChessBoard 21 1 2 0 21 resize:vector:__1:std 9 1 2 0 74 88:16:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 21 1 2 0 29 operator*:__wrap_iter:__1:std 31 1 2 0 14 vector:__1:std 31 1 2 0 18 unique_ptr:__1:std 21 1 2 0 21 move_piece:ChessBoard 10 1 2 0 74 97:38:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 10 1 2 0 74 97:63:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 9 1 2 0 73 98:9:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 21 1 2 0 31 operator[]:basic_string:__1:std 9 1 2 0 73 99:9:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 8 1 2 0 12 stoi:__1:std 24 1 2 0 20 basic_string:__1:std 9 1 2 0 74 100:9:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 9 1 2 0 74 101:9:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 9 1 2 0 75 103:11:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 21 1 2 0 25 operator[]:vector:__1:std 9 1 2 0 12 cout:__1:std 8 1 2 0 16 operator:__1:std 21 1 2 0 30 operator:basic_ostream:__1:std 8 1 2 0 12 endl:__1:std 9 1 2 0 75 107:15:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 9 1 2 0 75 111:22:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 21 1 2 0 22 get:unique_ptr:__1:std 21 1 2 0 28 operator=:unique_ptr:__1:std 8 1 2 0 12 move:__1:std 21 1 2 0 21 printBoard:ChessBoard 9 1 2 0 75 134:14:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 9 1 2 0 75 136:16:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 9 1 2 0 75 138:15:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 8 1 2 0 4 main 9 1 2 0 75 152:14:/Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 8 1 2 0 19 make_unique:__1:std 0 0 1 0 0 0 68 /Users/Nikolai/Documents/programmering/5semester/cpp/oving5/main.cpp 1599301158